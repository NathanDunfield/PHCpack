Matrix types in PHCv2.4.63

Below are some milestones in the development of this library.
New in the second release is the availability of multiprecision numbers,
implemented with appropriate Ada 95 concepts.
Version 2.1 has an additional package nested vectors to represent
general dimensional matrices of any numbers.
Vectors were moved to a separate directory in release v2.3.33.
New in release 2.3.49 is integer64.
In v2.3.55, double double and quad double numbers were introducted.
In v2.3.71, the solvers for integer and floating-point matrices were
moved to separate directories.

This library is organized in three parts :
1) generic packages: matrices, vecmats, and their _io.
2) instantiations:
      {standard,multprec}_{natural,integer,floating,complex}_
      {matrices,vecmats}[_{io}]
3) random generators and test programs, with prefix ts_*
The organization above is hierarchic.  Other possible views are 
classifications by numeric types (e.g., everything with standard_integer*,
*integer*, etc...) or by data types.

------------------------------------------------------------------------------
file name                          : short description
------------------------------------------------------------------------------
generic_matrices                   : matrices with coefficients in any ring
generic_matrices_io                : input/output for generic matrices
generic_vecmats                    : vectors of matrices over any ring
generic_vecmats_io                 : input/output for vectors of matrices
------------------------------------------------------------------------------
boolean_matrices                   : defines matrices of Boolean numbers
boolean_matrices_io                : input/output for Boolean matrices
standard_natural_matrices          : matrices of standard natural numbers
standard_natural_matrices_io       : generic_matrices_io(standard natural)
standard_integer_matrices          : matrices of standard integer numbers
standard_integer_matrices_io       : generic_matrices_io(standard integer)
standard_integer_vecmats           : generic_vecmats(standard integer)
standard_integer_vecmats_io        : generic_vecmats_io(standard integer)
standard_integer64_matrices        : matrices of standard integer64 numbers
standard_integer64_matrices_io     : generic_matrices_io(standard integer64)
standard_integer64_vecmats         : generic_vecmats(standard integer64)
standard_integer64_vecmats_io      : generic_vecmats_io(standard integer64)
standard_floating_matrices         : matrices of standard floating numbers
standard_floating_matrices_io      : generic_matrices_io(standard floating)
standard_floating_vecmats          : generic_vecmats(standard floating)
standard_floating_vecmats_io       : generic_vecmats_io(standard floating)
standard_complex_matrices          : matrices of standard complex numbers
standard_complex_matrices_io       : generic_matrices_io(standard complex)
standard_complex_vecmats           : generic_vecmats(standard complex)
dobldobl_complex_vecmats           : generic_vecmats(dobldobl complex)
quaddobl_complex_vecmats           : generic_vecmats(quaddobl complex)
standard_complex_vecmats_io        : generic_vecmats_io(standard complex)
double_double_matrices             : matrices of double double numbers
double_double_matrices_io          : generic_matrices_io(double double)
dobldobl_complex_matrices          : matrices of double double complex numbers
dobldobl_complex_matrices_io       : generic_matrices_io(double double complex)
quad_double_matrices               : matrices of quad double numbers
quad_double_matrices_io            : generic_matrices_io(quad double)
quaddobl_complex_matrices          : matrices of quad double complex numbers
quaddobl_complex_matrices_io       : generic_matrices_io(quad double complex)
multprec_natural_matrices          : matrices of multiprecision natural numbers
multprec_natural_matrices_io       : generic_matrices_io(multprec natural)
multprec_integer_matrices          : matrices of multiprecision integer numbers
multprec_integer_matrices_io       : generic_matrices_io(multprec integer)
multprec_integer64_matrices        : multiprecision integer64 matrices
multprec_integer64_matrices_io     : generic_matrices_io(multprec integer64)
multprec_floating_matrices         : matrices of multiprecision floating 
multprec_floating_matrices_io      : generic_matrices_io(multprec floating)
multprec_floating64_matrices       : matrices of multiprecision floating 
multprec_floating64_matrices_io    : generic_matrices_io(multprec floating)
multprec_complex_vecmats           : generic_vecmats(multprec complex)
multprec_complex_vecmats_io        : generic_vecmats_io(multprec complex)
------------------------------------------------------------------------------
standard_random_matrices           : matrices of random standard numbers
dobldobl_random_matrices           : matrices of random double doubles
quaddobl_random_matrices           : matrices of random quad doubles
multprec_random_matrices           : matrices of random multiprecision numbers
------------------------------------------------------------------------------
matrix_to_vecvec_conversions       : convert matrices to vectors of vectors
varbprec_matrix_conversions        : convert matrices of various precisions
random_conditioned_matrices        : random matrices with given condition
------------------------------------------------------------------------------
ts_natmat                          : test matrices of natural numbers
ts_intmat                          : test solvers of integer numbers
ts_fltmat                          : test solvers of floating linear systems
ts_cmpmat                          : test solvers of complex linear systems
ts_ddmat                           : test on double double matrices
ts_qdmat                           : test on quad double matrices
------------------------------------------------------------------------------
The generic_* packages are different from the abstract_* packages in the
sense that they export types and operations, i.e.: they have a body.

There are three types of linear systems: over integer, floating-point reals
and complex numbers.  For each numeric type, there is only one generic
implementation, except for the complex numbers, where it became too complex
to elaborate the mixed floating-complex arithmetic with generics.
Also with norms and equalities, no generics are used for complex numbers.
